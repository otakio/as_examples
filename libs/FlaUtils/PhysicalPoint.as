package  FlaUtils{	import flash.geom.Point;	import flash.utils.Timer;	import flash.events.TimerEvent;	public class PhysicalPoint extends Point{		private var _vx:Number, _vy:Number;	//velocity		private var _ax:Number, _ay:Number;	//acceleration		private var _timer:Timer;		private var _lastTime:int;		private var _friction:Number = 0.95;		public function PhysicalPoint(xx:Number=0, yy:Number=0) {			// constructor code			x = xx;			y = yy;			_vx = 0;			_vy = 0;			_ax = 0;			_ay = 0;			_lastTime = new Date().getTime();			_timer = new Timer(16.6);			_timer.addEventListener(TimerEvent.TIMER, loop);			_timer.start();		}		private function loop(e:TimerEvent):void{			var curTime:int = new Date().getTime();			var t = (curTime - _lastTime) / 1000;						x += _vx * t + 0.5 * _ax * Math.pow(t, 2);			y += _vy * t + 0.5 * _ay * Math.pow(t, 2);						_vx += _ax * t;			_vy += _ay * t;						_vx *= _friction;			_vy *= _friction;						_ax = 0;			_ay = 0;						_lastTime = curTime;		}		public function setAcceleration(ax:Number, ay:Number):void{			_ax += ax;			_ay += ay;		}		public function setAccelerationTo(tx:Number, ty:Number, power:Number):void{			var distance:Number = this.getDistanceTo(tx, ty);			var direction:Number = this.getDirectionTo(tx, ty);			_ax += distance * power * Math.cos(direction);			_ay += distance * power * Math.sin(direction);		}		public function getDistanceTo(tx:Number, ty:Number):Number{			if(tx == x && ty != y){				return	Math.abs(ty - y);			}else if(ty == y && tx != x){				return	Math.abs(tx - x);			}else if(tx == x && ty == y){				return 0;			}else{				var distance:Number = Math.sqrt(Math.pow(tx-x, 2) + Math.pow(ty-y, 2));				return distance;			}		}		public function getDirectionTo(tx:Number, ty:Number):Number{			var angle:Number = 0.0;			if(tx == x){				if(ty > y)	angle = -Math.PI/2.0;				if(ty < y)	angle =  Math.PI/2.0;				else	angle = 0.0;			}else{				angle = Math.atan2(ty-y, tx-x);			}			if(angle < 0)	angle += Math.PI * 2.0;			if(angle > Math.PI * 2.0)	angle -= Math.PI * 2.0;			return angle;		}		public function setFriction(fr:Number):void{			_friction = fr;		}	}	}